# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/166I9-FuEPGbK096hNroE6mmqIFUcdyO1

# Import library
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import ExtraTreesClassifier, AdaBoostClassifier, GradientBoostingClassifier, AdaBoostRegressor

"""##Loading Dataset"""

df = pd.read_csv('https://raw.githubusercontent.com/RNBrosTS/ML-model-on-Stock-market/refs/heads/main/histretSP.csv')
df

df.describe()

df.dropna(inplace=True)

catergorical_cols = df.select_dtypes(include=['object']).columns
for col in catergorical_cols:
    df[col] = LabelEncoder().fit_transform(df[col])

scaler = StandardScaler()
df = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)

y_result = df["Unnamed: 6"]
label_encoder = LabelEncoder()
y_result = label_encoder.fit_transform(y_result)

print(pd.Series(y_result).value_counts())

"""# Another Dataset"""

another = pd.read_csv('https://raw.githubusercontent.com/RNBrosTS/ML-model-on-Stock-market/refs/heads/main/dse_2024_to_2022.csv')
another

another.dropna(inplace=True)

y = another['Turnover'].str.replace(',', '').astype(float)
y

x = another.drop(['Turnover', 'Date', 'Stock_Symbol'], axis=1)
x

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)

x_train['Percentage_Change'] = pd.to_numeric(x_train['Percentage_Change'], errors='coerce').fillna(0)
x_test['Percentage_Change'] = pd.to_numeric(x_test['Percentage_Change'], errors='coerce').fillna(0)

x_train

x_test

print(x_train.dtypes)
print(x_test.dtypes)

object_cols = x_train.select_dtypes(include='object').columns

for col in object_cols:
    if col != 'Percentage_Change':
        x_train[col] = pd.to_numeric(x_train[col].astype(str).str.replace(',', ''), errors='coerce').fillna(0)
        x_test[col] = pd.to_numeric(x_test[col].astype(str).str.replace(',', ''), errors='coerce').fillna(0)

print(x_train.dtypes)
print(x_test.dtypes)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

non_null_mask = y_train.notnull()

x_train_cleaned = x_train[non_null_mask]
y_train_cleaned = y_train[non_null_mask]


lr = LinearRegression()
lr.fit(x_train_cleaned, y_train_cleaned)
y_pred = lr.predict(x_test)
x_pred = lr.predict(x_train_cleaned)

print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred)}")
print(f"R-squared: {r2_score(y_test, y_pred)}")

y_pred

x_pred

"""### Model performance

"""

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse = mean_squared_error(y_train_cleaned, x_pred)
lr_train_r2 = r2_score(y_train_cleaned, x_pred)
lr_test_mse = mean_squared_error(y_test, y_pred)
lr_test_r2 = r2_score(y_test, y_pred)

lr_train_mse

lr_train_r2

lr_test_mse

lr_test_r2

lr_result = pd.DataFrame(['Linear Regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_result.columns = ['Method', 'Train MSE', 'Train R2', 'Test MSE', 'Test R2']
lr_result

"""## **Another** **model**"""

ada = AdaBoostRegressor(random_state= 10)
ada.fit(x_train_cleaned, y_train_cleaned)

y_predic = ada.predict(x_test)
x_predic = ada.predict(x_train_cleaned)

"""### Evaluation"""

ada_train_mse = mean_squared_error(y_train_cleaned, x_predic)
ada_train_r2 = r2_score(y_train_cleaned, x_predic)
ada_test_mse = mean_squared_error(y_test, y_predic)
ada_test_r2 = r2_score(y_test, y_predic)

ada_result = pd.DataFrame(['ADABoost Regression', ada_train_mse, ada_train_r2, ada_test_mse, ada_test_r2]).transpose()
ada_result.columns = ['Method', 'Train MSE', 'Train R2', 'Test MSE', 'Test R2']
ada_result

"""#### Comparison"""

df_models = pd.concat([lr_result, ada_result], axis=0)
df_models